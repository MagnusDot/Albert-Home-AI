# üê¶ Albert-Home-AI - R√®gles Cursor

## üìÅ Architecture Obligatoire

### Structure Agent (TOUJOURS respecter)
```
Agents/nom_agent/
‚îú‚îÄ‚îÄ nom_agent.mts      # Agent LangGraph principal
‚îú‚îÄ‚îÄ model.mts          # Configuration mod√®le IA
‚îú‚îÄ‚îÄ prompt.md          # Prompt syst√®me
‚îú‚îÄ‚îÄ generate_prompt.mts # G√©n√©rateur prompts
‚îî‚îÄ‚îÄ tools/             # Outils agent
    ‚îî‚îÄ‚îÄ outil.mts
```

### Extensions Fichiers
- **OBLIGATOIRE** : `.mts` pour TypeScript (JAMAIS `.ts`)
- `.md` pour prompts, `.json` pour config

## ü§ñ Agents LangGraph

### Pattern Standard
```typescript
import 'dotenv/config';
import { MemorySaver } from "@langchain/langgraph";
import { createReactAgent } from "@langchain/langgraph/prebuilt";

const agentCheckpointer = new MemorySaver();
export const nomAgent = createReactAgent({
  prompt: loadAgentPrompt('nom'),
  llm: agentModel,
  tools: [outil1, outil2],
  checkpointSaver: agentCheckpointer,
});
```

### Outils Standard
```typescript
import { tool } from "@langchain/core/tools";
import { z } from "zod";

export const nomOutil = tool(
  async ({ param }) => {
    return resultat;
  },
  {
    name: "nom_outil",
    description: "Description claire",
    schema: z.object({
      param: z.type().describe("Description param"),
    }),
  }
);
```

## üåê API Express

### Middleware Obligatoire
```typescript
app.use(cors({
  origin: '*',
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(express.json());
app.use(express.text());
```

### Endpoints Standard
- `/health` : Sant√© syst√®me
- `/agents` : Liste agents
- `/:agentId/invoke` : Invocation directe
- `/:agentId/stream` : Streaming SSE

## üñ•Ô∏è CLI Commander.js

### Configuration Manager
```typescript
class ConfigManager {
  async getConfig(): Promise<Config> {
    const bearerToken = process.env.BEARER;
    if (!bearerToken) {
      console.error('‚ùå BEARER requis dans .env');
      process.exit(1);
    }
    // Logique configuration...
  }
}
```

### Session Chat
```typescript
class ChatSession {
  private conversationId = `cli-${uuidv4()}`;
  private debug = false;
  
  displayMessage(message: string, isUser = false) {
    const style = isUser ? chalk.green.bold : chalk.blue.bold;
    console.log(`${style(isUser ? "Vous" : "Agent")}: ${message}`);
  }
}
```

## üîß Configuration

### Package.json
```json
{
  "type": "module",
  "scripts": {
    "cli": "tsx CLI/cli.mts",
    "server": "tsx serveur/server.mts",
    "dev": "tsx --watch serveur/server.mts"
  }
}
```

### Variables Env
```env
OPENAI_API_KEY=sk-...
PORT=8080
REQUIRE_AUTH=false
BEARER=token-cli
```

## üóÇÔ∏è Registre Agents

### agents-registry.mts
```typescript
export interface AgentInfo {
  id: string;
  name: string;
  description: string;
  agent: CompiledStateGraph<any, any>;
}

export const AGENTS_REGISTRY: Record<string, AgentInfo> = {
  albert: {
    id: 'albert',
    name: 'Albert IA',
    description: 'Assistant IA quotidien',
    agent: albertAgent
  }
};
```

## üé® Conventions

### Nommage
- Dossiers : `snake_case`
- Fichiers agents : `nomAgent.mts`
- Variables : `camelCase`
- Constantes : `UPPER_CASE`

### Imports
```typescript
import 'dotenv/config'; // TOUJOURS premier

// Externes
import { ChatOpenAI } from "@langchain/openai";

// Internes
import { loadAgentPrompt } from "./generate_prompt.mts";
```

## üêõ Debug & Erreurs

### Logging Debug
```typescript
private log(message: string): void {
  if (this.debug) {
    console.log(chalk.dim(`[DEBUG] ${message}`));
  }
}
```

### Gestion Erreurs
```typescript
try {
  // Code
} catch (error) {
  console.error(chalk.red(`‚ùå Erreur: ${error.message}`));
  res.status(500).json({
    error: 'Description erreur',
    message: error.message,
    path: req.path
  });
}
```

## üìù Prompts Dynamiques

### Variables Disponibles
- `{date}` : Date format√©e fran√ßais
- `{heure}` : Heure format√©e
- `{datetime}` : Date et heure compl√®tes

### Chargement
```typescript
export function loadAgentPrompt(agentName: string): string {
  const promptPath = path.join(process.cwd(), 'Agents', agentName, 'prompt.md');
  return loadAndProcessPrompt(promptPath);
}
```

## üîê S√©curit√©

### Auth Bearer
```typescript
function authenticateToken(req, res, next) {
  const token = req.headers['authorization']?.split(' ')[1];
  const requireAuth = process.env.REQUIRE_AUTH?.toLowerCase() !== 'false';
  
  if (!token && requireAuth) {
    return res.status(401).json({ error: 'Token requis' });
  }
  next();
}
```

**üê¶ Ces r√®gles assurent la coh√©rence et qualit√© du projet Albert-Home-AI** 